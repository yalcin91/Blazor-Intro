@inject HttpClient Http
@page "/todo"
@using BlazorIntro.Models;
@using BlazorIntro.Services;
@inject IApiService Api

<h3>ToDo</h3>

<h1>ToDo List</h1>
@if (toDoItems == null)
{
    <p>Loading...</p>
}
else
{

    <Syncfusion.Blazor.Grids.SfGrid DataSource="@toDoItems" AllowSorting="true" AllowFiltering="true"
                                EnableStickyHeader="true">

    </Syncfusion.Blazor.Grids.SfGrid>
    <style type="text/css" class="cssStyles">
        .e-grid .e-altrow {
            background-color: #fafafa;
        }
    </style>



    @*    <div style="overflow-y:scroll; overflow-x:scroll; max-height:500px; max-width:1100px;">
        <IgbDataGrid DataSource="@toDoItems" HeaderTextColor="purple">
            <IgbTextColumn Field="Id" Width="100"></IgbTextColumn>
            <IgbTextColumn Field="Title" MinWidth="200"></IgbTextColumn>
            <IgbTextColumn Field="Completed" Width="130"></IgbTextColumn>
            <IgbTextColumn Field="UserId" Width="100"></IgbTextColumn>
        </IgbDataGrid>
    </div>*@

    @*<table class="tabel table-striped table-bordered table-hover table-fit table-sm table-primary">
        <thead>
            <tr>
                <th>User Id</th>
                <th>Id</th>
                <th>Title</th>
                <th>Completed</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var toDoItems in toDoItems)
            {
                <tr>
                    <td>@toDoItems.UserId</td>
                    <td>@toDoItems.Id</td>
                    <td>@toDoItems.Title</td>
                    <td>@toDoItems.Completed</td>
                </tr>
            }
        </tbody>
    </table>*@
}

@code {
    ToDoItem[]? toDoItems;

    protected override async Task OnInitializedAsync()
    {
        //JsonPlaceholderApi jsonPlaceholderApi = new JsonPlaceholderApi(Http);
        toDoItems = await Api.GetTodos();
    }

}
